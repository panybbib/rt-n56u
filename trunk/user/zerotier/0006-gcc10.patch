--- a/osdep/Binder.hpp
+++ b/osdep/Binder.hpp
@@ -453,9 +453,9 @@
 					}
 #endif	 // __LINUX__
 					if (_bindingCount < ZT_BINDER_MAX_BINDINGS) {
-						_bindings[_bindingCount].udpSock = udps;
-						_bindings[_bindingCount].tcpListenSock = tcps;
-						_bindings[_bindingCount].address = ii->first;
+						_bindings[(unsigned int)_bindingCount].udpSock = udps;
+						_bindings[(unsigned int)_bindingCount].tcpListenSock = tcps;
+						_bindings[(unsigned int)_bindingCount].address = ii->first;
 						memcpy(_bindings[_bindingCount].ifname, (char*)ii->second.c_str(), (int)ii->second.length());
 						++_bindingCount;
 					}
--- a/ext/inja/inja.hpp
+++ b/ext/inja/inja.hpp
@@ -25,6 +25,7 @@
 #ifndef INCLUDE_INJA_INJA_HPP_
 #define INCLUDE_INJA_INJA_HPP_
 
+#include <stddef.h>
 #include <nlohmann/json.hpp>
 
 namespace inja {
@@ -2456,7 +2457,7 @@
     case Op::Round: {
       const auto args = get_arguments<2>(node);
       const int precision = args[1]->get<int>();
-      const double result = std::round(args[0]->get<double>() * std::pow(10.0, precision)) / std::pow(10.0, precision);
+      const double result = round(args[0]->get<double>() * std::pow(10.0, precision)) / std::pow(10.0, precision);
       if (precision == 0) {
         make_result(int(result));
       } else {
